# Rather than compiling the Linux x64 header files, we use copies of only the required function declarations from
# the system headers. This keeps the generated interop layer small and allows the project to be built on any platform.
# Original license of the system headers: GPL-2.0 WITH Linux-syscall-note

headerFilter = linux/openat2.h fcntl.h sys/stat.h sys/timerfd.h
compilerOpts = -D_ANSI_SOURCE -D_POSIX_C_SOURCE=199309 -D_BSD_SOURCE -D_XOPEN_SOURCE=700

---
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/timerfd.h>

// linux/openat2.h
struct open_how {
  unsigned long long flags;
  unsigned long long mode;
  unsigned long long resolve;
};

#define RESOLVE_NO_XDEV 0x01
#define RESOLVE_NO_MAGICLINKS 0x02
#define RESOLVE_NO_SYMLINKS 0x04
#define RESOLVE_BENEATH 0x08
#define RESOLVE_IN_ROOT 0x10
#define RESOLVE_CACHED 0x20

// sys/stat.h
extern int fstatat (int fd, const char *file, struct stat *buf, int flag);
extern int fchmodat (int fd, const char *file, mode_t mode, int flag);
extern int linkat (int olddirfd, const char *oldpath, int newdirfd, const char *newpath, int flags);
extern int mkdirat (int fd, const char *path, mode_t mode);
extern int renameat (int olddirfd, const char *oldpath, int newdirfd, const char *newpath);
extern int utimensat (int fd, const char *path, const struct timespec times[2], int flags);

// bits/syscall.h
#define SYS_openat2 437
#define SYS_faccessat2 439

// x86_64-linux-gnu/bits/stat.h
#define UTIME_NOW ((1l << 30) - 1l)
#define UTIME_OMIT ((1l << 30) - 2l)

// /usr/include/linux/fcntl.h
#define AT_FDCWD -100

#define AT_SYMLINK_NOFOLLOW 0x100
#define AT_EACCESS 0x200

#define AT_REMOVEDIR 0x200

#define AT_SYMLINK_FOLLOW 0x400
#define AT_NO_AUTOMOUNT 0x800
#define AT_EMPTY_PATH 0x1000

// unistd.h
extern int fchownat (int fd, const char *file, int owner, int group, int flag);
extern long readlinkat (int fd, const char *path, char *buf, unsigned long len);
extern int unlinkat (int fd, const char *path, int flags);
extern int symlinkat (const char *target, int newfd, const char *linkpath);

// sys/timerfd.h
extern int timerfd_create(int clockid, int flags);
extern int timerfd_settime(int fd, int flags,const struct itimerspec *new_value, struct itimerspec *_Nullable old_value);
extern int timerfd_gettime(int fd, struct itimerspec *curr_value);
