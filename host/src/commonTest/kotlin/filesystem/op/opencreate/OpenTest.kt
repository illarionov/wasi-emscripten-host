/*
 * Copyright 2024, the wasi-emscripten-host project authors and contributors. Please see the AUTHORS file
 * for details. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
 * SPDX-License-Identifier: Apache-2.0
 */

package at.released.weh.filesystem.op.opencreate

import arrow.core.getOrElse
import assertk.all
import assertk.assertThat
import assertk.assertions.isEqualTo
import at.released.weh.filesystem.FileSystem
import at.released.weh.filesystem.dsl.FileSystemEngineConfig
import at.released.weh.filesystem.model.BaseDirectory
import at.released.weh.filesystem.model.FileSystemErrno
import at.released.weh.filesystem.op.close.CloseFd
import at.released.weh.filesystem.test.fixtures.toVirtualPath
import at.released.weh.filesystem.testutil.BaseFileSystemIntegrationTest
import at.released.weh.filesystem.testutil.DefaultTestFileSystem
import at.released.weh.filesystem.testutil.SymlinkType
import at.released.weh.filesystem.testutil.createTestDirectory
import at.released.weh.filesystem.testutil.createTestFile
import at.released.weh.filesystem.testutil.createTestSymlink
import at.released.weh.filesystem.testutil.tempFolderDirectoryFd
import at.released.weh.test.filesystem.assertions.isEmpty
import at.released.weh.test.filesystem.assertions.isRegularFile
import at.released.weh.test.filesystem.assertions.mode.PosixFileModeBit.USER_EXECUTE
import at.released.weh.test.filesystem.assertions.mode.PosixFileModeBit.USER_READ
import at.released.weh.test.filesystem.assertions.mode.PosixFileModeBit.USER_WRITE
import at.released.weh.test.filesystem.assertions.mode.posixFileModeIfSupportedIsEqualTo
import at.released.weh.test.utils.absolutePath
import kotlinx.io.files.Path
import kotlin.test.Test
import kotlin.test.fail

class OpenTest : BaseFileSystemIntegrationTest() {
    @Test
    fun create_file_with_relative_path_should_work() {
        val root: Path = tempFolder.absolutePath()
        val testFile = "file.test"

        createTestFileSystem().use { fileSystem ->
            val request = Open(
                path = testFile.toVirtualPath(),
                baseDirectory = BaseDirectory.CurrentWorkingDirectory,
                openFlags = OpenFileFlag.O_CREAT or OpenFileFlag.O_WRONLY,
                fdFlags = 0,
                mode = 0b111_000_000,
            )
            val newFd: Int = fileSystem.execute(Open, request).getOrElse {
                error("open() with O_CREAT failed: $it")
            }

            fileSystem.execute(CloseFd, CloseFd(newFd))
        }
        assertThat(Path(root, testFile)).all {
            isRegularFile()
            isEmpty()
            posixFileModeIfSupportedIsEqualTo(USER_READ, USER_WRITE, USER_EXECUTE)
        }
    }

    @Test
    fun create_file_with_absolute_path_should_not_work_if_root_access_not_allowed() {
        val root: Path = tempFolder.absolutePath()
        val testFile = Path(root, "file.test")

        val virtualPath = "/file.test".toVirtualPath()

        val error = createTestFileSystem().use { fileSystem ->
            val request = Open(
                path = virtualPath,
                baseDirectory = BaseDirectory.CurrentWorkingDirectory,
                openFlags = OpenFileFlag.O_CREAT or OpenFileFlag.O_WRONLY,
                fdFlags = 0,
                mode = 0b111_000_000,
            )
            fileSystem.execute(Open, request).fold(
                ifRight = { fail("Test file with absolute path `$testFile` should not be created") },
                ifLeft = { error -> error },
            )
        }
        assertThat(error.errno).isEqualTo(FileSystemErrno.NOTCAPABLE)
    }

    @Test
    fun create_file_with_absolute_path_should_work_if_root_access_is_allowed() {
        val root: Path = tempFolder.absolutePath()
        val testFile = Path(root, "file.test")

        val virtualPath = testFile.toString().replace("\\", "/").toVirtualPath()

        val filesystem: FileSystem = DefaultTestFileSystem<FileSystemEngineConfig> {
            isRootAccessAllowed = true
            currentWorkingDirectory = tempFolder.path
        }

        filesystem.use { fileSystem ->
            val request = Open(
                path = virtualPath,
                baseDirectory = BaseDirectory.CurrentWorkingDirectory,
                openFlags = OpenFileFlag.O_CREAT or OpenFileFlag.O_WRONLY,
                fdFlags = 0,
                mode = 0b111_000_000,
            )
            val newFd: Int = fileSystem.execute(Open, request).getOrElse {
                error("open() with O_CREAT failed: $it")
            }

            fileSystem.execute(CloseFd, CloseFd(newFd))
        }
        assertThat(testFile).all {
            isRegularFile()
            isEmpty()
            posixFileModeIfSupportedIsEqualTo(USER_READ, USER_WRITE, USER_EXECUTE)
        }
    }

    @Test
    fun symlinks_should_follow_when_open_file() {
        tempFolder.apply {
            createTestFile("source.txt")
            createTestDirectory("""dir""")
            createTestSymlink(
                """../source.txt""",
                """dir/symlink.file""",
                SymlinkType.SYMLINK_TO_FILE,
            )
        }
        createTestFileSystem().use { fileSystem ->
            val request = Open(
                path = "dir/symlink.file".toVirtualPath(),
                baseDirectory = tempFolderDirectoryFd,
                openFlags = OpenFileFlag.O_RDONLY,
                fdFlags = 0,
                mode = 0b111_000_000,
            )
            val newFd: Int = fileSystem.execute(Open, request).getOrElse {
                error("open() failed: $it")
            }
            fileSystem.execute(CloseFd, CloseFd(newFd))
        }
    }
}
